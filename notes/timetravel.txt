UNDOING CHANGES 
    AND 
TIME TRAVELING
==================

# NOTES FOR UNDOING CHANGES

git checkout <commit hash number>
    # this will move the head to a former
    commmit. Detached Head. Change branch to 
    go back. 
    *** You can then make a new branch at an old spot
        and work from that point forward without the 
        other commits that came after it. 

git checkout HEAD~1
    # This refers to commits that came before.
        so HEAD~1 is one commint before the current 
        position of head. HEAD~2 would be two
        positions before and so on.

git checkout HEAD <file name> or git checkout --<fileename>
    # to delete unstaged or non-commmited changes to a file.

git restore <file-name>
    # simular to above. goes back to previous commit.

git restore --staged <file-name>
    # unstage any files since previous commit. 

git reset <commit-hash>
    # resets repo to specified commit. 
        This will remove the commit without 
        deleting changes that were made. 

git reset --hard <commit-hash>
    # resets to the specified commit AND it 
        will delete any changes that were made
        after that commit. 

git revert <commit-hash>
    # is simular to git reset, they bot undo changes,
        but they accomplish it in different ways.
            *** NOTES on DIFFERENCES
                git RESET actually moves the branch pointer
                backwards eliminating commits.

                git REVERT instead creates a brand new
                commit which reverses and undos abovecommit. 
                Beacuse the result is a new commit,
                you will be prompted to enter a commit 
                messsage.


